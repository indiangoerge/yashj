import jsPDF from 'jspdf';
import { Estimate, ProductEstimate } from '../types';
import { PRODUCTS } from '../data/products';
import { calculatePricing, formatCurrency } from './calculations';
import { format } from 'date-fns';

export const generateEstimatePDF = (estimate: Estimate, includeDetailedBreakdown: boolean = true) => {
  const pdf = new jsPDF();
  let yPosition = 20;

  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(245, 158, 11); // Primary gold color
  pdf.text('Grain Export Estimate Report', 20, yPosition);
  
  yPosition += 15;
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Container ID: ${estimate.containerId}`, 20, yPosition);
  pdf.text(`Date: ${format(new Date(estimate.date), 'PPP')}`, 120, yPosition);
  
  yPosition += 10;
  pdf.text(`Created by: ${estimate.createdBy} (${estimate.role})`, 20, yPosition);
  
  yPosition += 20;

  // Summary section
  pdf.setFontSize(16);
  pdf.setTextColor(6, 95, 70); // Secondary green color
  pdf.text('Summary', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Total Estimate Value: ${formatCurrency(estimate.totalCost)}`, 20, yPosition);
  pdf.text(`Average Margin Applied: ${estimate.marginApplied.toFixed(2)}%`, 20, yPosition + 8);
  pdf.text(`Number of Products: ${estimate.products.length}`, 20, yPosition + 16);

  yPosition += 35;

  // Products breakdown
  pdf.setFontSize(16);
  pdf.setTextColor(6, 95, 70);
  pdf.text('Product Breakdown', 20, yPosition);
  yPosition += 15;

  estimate.products.forEach((productEstimate: ProductEstimate, index: number) => {
    const product = PRODUCTS.find(p => p.id === productEstimate.productId);
    const pricing = calculatePricing(productEstimate);

    if (yPosition > 250) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`${index + 1}. ${product?.name || 'Unknown Product'}`, 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.text(`Procurement Cost: ${formatCurrency(pricing.procurementCost)}`, 30, yPosition);
    pdf.text(`Importer Cost: ${formatCurrency(pricing.importerCost)}`, 30, yPosition + 6);
    pdf.text(`Distributor Price: ${formatCurrency(pricing.distributorPrice)}`, 30, yPosition + 12);
    pdf.text(`Retailer Price: ${formatCurrency(pricing.retailerPrice)}`, 30, yPosition + 18);

    yPosition += 25;

    if (includeDetailedBreakdown) {
      pdf.setFontSize(9);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Origin Costs:', 30, yPosition);
      yPosition += 5;
      
      const originCosts = [
        `Raw Material: ${formatCurrency(productEstimate.originCost.rawMaterialCost)}`,
        `Transport: ${formatCurrency(productEstimate.originCost.transportCost)}`,
        `Packing: ${formatCurrency(productEstimate.originCost.packingCost)}`,
        `Fumigation: ${formatCurrency(productEstimate.originCost.fumigationCost)}`,
        `Customs: ${formatCurrency(productEstimate.originCost.customsClearanceCost)}`,
      ];

      originCosts.forEach(cost => {
        pdf.text(cost, 35, yPosition);
        yPosition += 4;
      });

      yPosition += 5;
      pdf.text('Logistics Costs:', 30, yPosition);
      yPosition += 5;

      const logisticsCosts = [
        `Freight: ${formatCurrency(productEstimate.logisticsCost.freightCost)}`,
        `Import Duty: ${formatCurrency(productEstimate.logisticsCost.importDuty)}`,
        `Customs: ${formatCurrency(productEstimate.logisticsCost.customsClearance)}`,
        `Transport: ${formatCurrency(productEstimate.logisticsCost.transportToDestination)}`,
      ];

      logisticsCosts.forEach(cost => {
        pdf.text(cost, 35, yPosition);
        yPosition += 4;
      });

      yPosition += 10;
    }
  });

  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(150, 150, 150);
  pdf.text('Generated by Grain Export Estimator', 20, 280);
  pdf.text(`Report generated on ${format(new Date(), 'PPpp')}`, 20, 285);

  // Save the PDF
  pdf.save(`estimate-${estimate.containerId}-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
};